# 🚀 SpaceX Launch Service (AWS Lambda + GitHub Actions)

Este proyecto implementa un servicio sin servidor (serverless) en AWS Lambda que expone una API REST para consultar lanzamientos de SpaceX. Se despliega automáticamente con GitHub Actions y AWS SAM.

---

## 🧰 Tecnologías utilizadas

- Python 3.12
- AWS Lambda
- Amazon API Gateway
- Amazon DynamoDB
- Amazon EventBridge
- Amazon S3
- AWS Identity and Access Management (IAM)
- AWS SAM (Serverless Application Model)
- GitHub Actions
- Docker (para pruebas locales)

---

## 📁 Estructura del proyecto

├── .github/workflows/ci-cd.yml # Pipeline de despliegue automático
├── src/ # Código fuente (handler.py)
├── template.yaml # Definición de recursos AWS (SAM)
├── requirements.txt # Dependencias de Python
└── tests/ # Pruebas unitarias


## 🚀 Despliegue en AWS real (automático con GitHub Actions)

### 1. 🔑 Configurar los Secrets en GitHub
Ve al repositorio → **Settings** → **Secrets and variables** → **Actions** → y agrega:

| Nombre del Secret         | Descripción                            |
|---------------------------|----------------------------------------|
| `AWS_ACCESS_KEY_ID`       | Access Key de un usuario IAM           |
| `AWS_SECRET_ACCESS_KEY`   | Secret Key del usuario IAM             |
| `AWS_REGION`              | Región donde desplegar (ej: `us-east-1`) |

Asegúrate de que el usuario IAM de AWS tenga permisos para usar:

- AdministratorAccess
- AmazonDynamoDBFullAccess
- AmazonS3FullAccess
- AWSCloudFormationFullAccess
- AWSLambda_FullAccess
- CloudWatchLogsFullAccess

### 2. 📝 ¿Qué hace el pipeline?

Cada vez que haces **push a `master`**:

1. Construye el proyecto e instala las dependencias
2. Corre tests unitarios.
3. Asegura que el bucket S3 exista.
4. Usa `sam build` y `sam deploy` para desplegar la función Lambda en la cuenta AWS real.

---

### 3. 📡 ¿Qué recurso se crea?

- Una función Lambda que responde a `GET /launches` en una API REST.
- Un cron (Schedule) que actualiza la información cada 6 horas.
- Una tabla DynamoDB llamada `launches`.
- Un Bucket en S3 llamado `spacex-deploy-artifacts`

---

## 🔍 Pruebas manuales

Una vez desplegado, puedes consultar la API desde:   
- GET https://<tu-url-api>.amazonaws.com/Prod/launches

## 🧪 Pruebas locales con Docker (opcional)

Puedes ejecutar tu función Lambda en local así:

## 📦 Requisitos

- [Docker](https://www.docker.com/products/docker-desktop) instalado y corriendo.
- [AWS SAM CLI](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/install-sam-cli.html) instalado.
- Python 3.12 y `pip`.

---

## 🌐 1. Crear red de Docker (solo la primera vez)

Esto permite la comunicacion con DynamoDB Local.

```bash
docker network create my-network

## 🐳 1. Instalar y correr DynamoDB Local

Ejecuta el siguiente comando para iniciar DynamoDB Local:

```bash
docker run -d -p 8000:8000 --network my-network --name dynamodb-local amazon/dynamodb-local 


## En la raiz del proyecto para construir la imagen docker lambda ejecutar.

```bash
docker build -t spacex-lambda .

## Ejecutar el contenedor

```bash
docker run -p 9000:8080 \
  --network my-network \
  -e REGION_NAME=us-east-1 \
  -e ACCESS_KEY=dummy \
  -e SECRET_KEY=dummy \
  -e DB_TABLE_NAME=launches \
  -e DB_HOST=dynamodb-local \
  -e DB_PORT=8000 \
  spacex-lambda

## api test
```bash
curl -XPOST "http://localhost:9000/2015-03-31/functions/function/invocations" \
  -d '{}'
